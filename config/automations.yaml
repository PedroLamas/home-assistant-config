- alias: Home Assistant started, set default theme
  initial_state: 'on'
  trigger:
    - platform: homeassistant
      event: start
  action:
    service: frontend.set_theme
    data:
      name: slate

- alias: Sensor low battery, send notification
  initial_state: true
  trigger:
    - platform: numeric_state
      entity_id:
        - sensor.backdoor_battery
        - sensor.frontdoor_battery
        - sensor.frontdoormailbox_battery
        - sensor.kidsbedroomclimate_battery
        - sensor.livingroomclimate_battery
        - sensor.lowerfloorclimate_battery
        - sensor.masterbedroomclimate_battery
        - sensor.smartvibrationsensor_battery
      below: 20
  action:
    - service: persistent_notification.create
      data:
        title: "Device with low battery"
        message: "The {{ trigger.to_state.attributes.friendly_name }} sensor has low battery!"

- alias: Device offline, send notification
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.unifi_cloud_key_gen2_plus
        - binary_sensor.philips_hue_bridge_2_1
        - binary_sensor.synology_ds412_nas
        - binary_sensor.raspberry_pi_2_model_b
      from: "on"
      to: "off"
      for:
        seconds: 60
    - platform: state
      entity_id:
        - sensor.zigbee2mqtt_bridge_state
      from: "online"
      to: "offline"
      for:
        seconds: 60
  action:
    - service: script.send_notification_pedro
      data_template:
        message: "ALERT: {{ trigger.to_state.attributes.friendly_name }} is offline."

- alias: External IP doesn't match reported IP, update reported IP
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - sensor.external_ip
        - sensor.reported_ip
  condition:
    - condition: template
      value_template: >-
        {{ not(is_state('sensor.external_ip', 'unknown') or is_state('sensor.reported_ip', 'unknown')) and states('sensor.external_ip') != states('sensor.reported_ip') }}
  action:
    - service: script.update_reported_ip

- alias: CPU temperature above 42, send notification
  trigger:
    - platform: numeric_state
      entity_id: sensor.cpu_temperature
      above: 42
      for:
        minutes: 10
  action:
    - service: script.send_notification_pedro
      data_template:
        message: "ALERT: CPU temperature is above 42Â°C!"

- alias: Washing Machine program finished, send notification
  trigger:
    - platform: state
      entity_id: binary_sensor.washing_machine_program_running
      from: "on"
      to: "off"
  action:
    - service: script.send_notification_all
      data_template:
        message: "Washing Machine program finished!"

- alias: Door open, send notification
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      from: "off"
      to: "on"
  action:
    - service: script.send_notification_with_living_room_camera_snapshot
      data_template:
        message: "{{ trigger.to_state.attributes.friendly_name }} is open!"

- alias: Door open for 5 minutes, send notification
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      from: "off"
      to: "on"
      for:
        minutes: 5
  action:
    - service: script.send_notification_all
      data_template:
        message: "ALERT: {{ trigger.to_state.attributes.friendly_name }} is still open!"
    - service: input_boolean.turn_on
      data_template:
        entity_id: "{{ trigger.to_state.attributes.send_notification_entity_id }}"

- alias: Door open, turn on lamp
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      from: "off"
      to: "on"
  condition:
    - condition: template
      value_template: >-
        {{ is_state(trigger.to_state.attributes.lamp_entity_id, 'off') or is_state(trigger.to_state.attributes.lamp_off_entity_id, 'on') }}
  action:
    - service: light.turn_on
      data_template:
        entity_id: "{{ trigger.to_state.attributes.lamp_entity_id }}"
    - service: input_boolean.turn_on
      data_template:
        entity_id: "{{ trigger.to_state.attributes.lamp_off_entity_id }}"

- alias: Door closed after 5 minutes, send notification
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      to: "off"
  condition:
    - condition: template
      value_template: >-
        {{ is_state(trigger.to_state.attributes.send_notification_entity_id, 'on') }}
  action:
    - service: input_boolean.turn_off
      data_template:
        entity_id: "{{ trigger.to_state.attributes.send_notification_entity_id }}"
    - service: script.send_notification_all
      data_template:
        message: "{{ trigger.to_state.attributes.friendly_name }} is closed!"

- alias: Door closed for 30s, turn off lamp
  initial_state: true
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      to: "off"
      for:
        seconds: 30
  condition:
    - condition: template
      value_template: >-
        {{ is_state(trigger.to_state.attributes.lamp_off_entity_id, 'on') }}
  action:
    - service: input_boolean.turn_off
      data_template:
        entity_id: "{{ trigger.to_state.attributes.lamp_off_entity_id }}"
    - service: light.turn_off
      data_template:
        entity_id: "{{ trigger.to_state.attributes.lamp_entity_id }}"

- alias: Front Door Mailbox movement, send notification
  initial_state: true
  trigger:
    - platform: state
      entity_id: sensor.frontdoormailbox_action
      from: ""
  condition:
    - condition: template
      value_template: >-
        {{ trigger.to_state.state != 'unknown' and trigger.to_state.state != 'unavailable' and is_state('binary_sensor.frontdoor_contact', 'off') }}
  action:
    - service: script.send_notification_all
      data_template:
        message: "Movement detected on Front Door Mailbox"

- alias: Smart Vibration Sensor movement, send notification
  trigger:
    - platform: state
      entity_id: sensor.smartvibrationsensor_action
      from: ""
  condition:
    - condition: template
      value_template: >-
        {{ trigger.to_state.state != 'unknown' and trigger.to_state.state != 'unavailable' }}
  action:
    - service: script.send_notification_with_lower_floor_camera_snapshot
      data_template:
        message: "Movement detected on Smart Vibration Sensor"

- alias: Update available, send notification
  initial_state: true
  trigger:
    - platform: state
      entity_id: updater.updater
  action:
    - service: script.send_notification_pedro
      data_template:
        message: "Home Assistant update available!"

- alias: Zigbee2mqtt Log Level
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_select.zigbee2mqtt_log_level
      to: debug
    - platform: state
      entity_id: input_select.zigbee2mqtt_log_level
      to: warn
    - platform: state
      entity_id: input_select.zigbee2mqtt_log_level
      to: error
    - platform: state
      entity_id: input_select.zigbee2mqtt_log_level
      to: info
  action:
    - service: mqtt.publish
      data:
        payload_template: "{{ states('input_select.zigbee2mqtt_log_level') }}"
        topic: "zigbee2mqtt/bridge/config/log_level"
