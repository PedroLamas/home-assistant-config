- alias: Sensor low battery, send notification
  mode: queued
  trigger:
    - platform: numeric_state
      entity_id:
        - sensor.backdoor_battery
        - sensor.frontdoor_battery
        - sensor.frontdoormailbox_battery
        - sensor.kidsbedroomclimate_battery
        - sensor.laundryroomclimate_battery
        - sensor.livingroomclimate_battery
        - sensor.lowerfloorclimate_battery
        - sensor.masterbedroomclimate_battery
        - sensor.smartswitch_battery
        - sensor.smartvibrationsensor_battery
      below: 20
  action:
    - service: persistent_notification.create
      data:
        title: "Device with low battery"
        message: "The {{ trigger.to_state.attributes.friendly_name }} sensor has low battery!"

- alias: Smart Plug on with low power for 2 minutes, turn off
  mode: queued
  trigger:
    - platform: numeric_state
      entity_id:
        - sensor.smartplug4_power
        - sensor.smartplug7_power
      below: 0.5
      for:
        minutes: 2
  condition:
    - "{{ is_state(trigger.to_state.attributes.switch, 'on') }}"
  action:
    - service: switch.turn_off
      data:
        entity_id: "{{ trigger.to_state.attributes.switch }}"

- alias: Device offline, send notification
  mode: queued
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.philips_hue_bridge_2_1
        - binary_sensor.raspberry_pi_2_model_b
        - binary_sensor.synology_ds412_nas
        - binary_sensor.unifi_cloud_key_gen2_plus
      to: "off"
      for:
        minutes: 1
    - platform: state
      entity_id:
        - sensor.zigbee2mqtt_bridge_state
      to: "offline"
      for:
        minutes: 1
  action:
    - service: script.send_notification
      data:
        recipient: "pedro"
        message: "{{ trigger.to_state.attributes.friendly_name }} is offline."
        color: "red"
        channel: "System"
        tag: "{{ trigger.entity_id }}-deviceoffline"

- alias: Device online, clear notification
  mode: queued
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.philips_hue_bridge_2_1
        - binary_sensor.raspberry_pi_2_model_b
        - binary_sensor.synology_ds412_nas
        - binary_sensor.unifi_cloud_key_gen2_plus
      from: "off"
      to: "on"
    - platform: state
      entity_id:
        - sensor.zigbee2mqtt_bridge_state
      from: "offline"
      to: "online"
  action:
    - service: script.clear_notification
      data:
        recipient: "pedro"
        channel: "System"
        tag: "{{ trigger.entity_id }}-deviceoffline"

- alias: Washing Machine program finished, send notification
  trigger:
    - platform: state
      entity_id: binary_sensor.washing_machine_program_running
      to: "off"
  action:
    - service: script.send_notification
      data:
        message: "Washing Machine program finished!"
        channel: "Automation"
        tag: "washingmachine"

- alias: Door open, send notification
  mode: queued
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      to: "on"
  action:
    - service: script.send_notification
      data:
        message: "{{ trigger.to_state.attributes.friendly_name }} is open!"
        channel: "Alarm"
        tag: "{{ trigger.entity_id }}"

- alias: Door open and lamp off, turn on lamp
  mode: queued
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      to: "on"
  condition:
    - "{{ is_state(trigger.to_state.attributes.lamp_entity_id, 'off') }}"
  action:
    - service: light.turn_on
      data:
        entity_id: "{{ trigger.to_state.attributes.lamp_entity_id }}"
    - service: input_boolean.turn_on
      data:
        entity_id: "{{ trigger.to_state.attributes.lamp_off_entity_id }}"

- alias: Door closed for 30s, turn off lamp
  mode: queued
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      to: "off"
      for:
        seconds: 30
  condition:
    - "{{ is_state(trigger.to_state.attributes.lamp_off_entity_id, 'on') }}"
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: "{{ trigger.to_state.attributes.lamp_off_entity_id }}"
    - service: light.turn_off
      data:
        entity_id: "{{ trigger.to_state.attributes.lamp_entity_id }}"

- alias: Door open for 5 minutes, send notification
  mode: queued
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      to: "on"
      for:
        minutes: 5
  action:
    - service: script.send_notification
      data:
        message: "{{ trigger.to_state.attributes.friendly_name }} is still open!"
        color: "red"
        channel: "Alarm"
        tag: "{{ trigger.entity_id }}"

- alias: Door closed, send notification
  mode: queued
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backdoor_contact
        - binary_sensor.frontdoor_contact
      to: "off"
  action:
    - service: script.send_notification
      data:
        message: "{{ trigger.to_state.attributes.friendly_name }} is closed!"
        channel: "Alarm"
        tag: "{{ trigger.entity_id }}"
        allow_clear: "true"

- alias: Front Door Mailbox movement, send notification
  trigger:
    - platform: state
      entity_id: sensor.frontdoormailbox_action
      from: ""
  condition:
    - "{{ trigger.to_state.state != 'unknown' and trigger.to_state.state != 'unavailable' and is_state('binary_sensor.frontdoor_contact', 'off') }}"
  action:
    - service: script.send_notification
      data:
        message: "Movement detected on Front Door Mailbox"
        channel: "Automation"
        tag: "frontdoormailbox"

- alias: Set alarm state
  trigger:
    - platform: homeassistant
      event: start
    - platform: event
      event_type: automation_reloaded
    - platform: time
      at:
        - "01:00:00"
        - "07:00:00"
    - platform: state
      entity_id:
        - person.pedro
        - person.joana
  action:
    choose:
      - conditions:
          - condition: time
            after: "01:00:00"
            before: "07:00:00"
        sequence:
          - service: alarm_control_panel.alarm_arm_night
            entity_id: alarm_control_panel.home_alarm
      - conditions:
          - condition: not
            conditions:
              - condition: state
                entity_id: group.family
                state: "home"
        sequence:
          - service: alarm_control_panel.alarm_arm_away
            entity_id: alarm_control_panel.home_alarm
    default:
      - service: alarm_control_panel.alarm_disarm
        entity_id: alarm_control_panel.home_alarm

- alias: Smart Vibration Sensor movement, send notification
  trigger:
    - platform: state
      entity_id: sensor.smartvibrationsensor_action
      from: ""
  condition:
    - "{{ trigger.to_state.state != 'unknown' and trigger.to_state.state != 'unavailable' }}"
  action:
    - service: script.send_notification_with_lower_floor_camera_snapshot
      data:
        message: "Movement detected on Smart Vibration Sensor"

- alias: Phone battery at 90% and charging, send notification
  trigger:
    - platform: numeric_state
      entity_id:
        - sensor.joana_oneplus7_battery_level
        - sensor.pedro_oneplus7pro_battery_level
      above: 89
      below: 100
  condition:
    - "{{ is_state(trigger.entity_id | replace ('_level', '_state'), 'charging') }}"
  action:
    - service: script.send_notification
      data:
        recipient: "{{ trigger.to_state.attributes.recipient }}"
        message: "Phone battery charged to {{ trigger.to_state.state }}%!"
        channel: "Phone"
        tag: "Battery"

- alias: Phone battery fully charged, send notification
  mode: queued
  trigger:
    - platform: numeric_state
      entity_id:
        - sensor.joana_oneplus7_battery_level
        - sensor.pedro_oneplus7pro_battery_level
      above: 99
  action:
    - service: script.send_notification
      data:
        recipient: "{{ trigger.to_state.attributes.recipient }}"
        message: "Phone battery fully charged!"
        channel: "Phone"
        tag: "Battery"

- alias: Phone not charging, clear notification
  mode: queued
  trigger:
    - platform: state
      entity_id:
        - sensor.joana_oneplus7_battery_state
        - sensor.pedro_oneplus7pro_battery_state
      to: "discharging"
  action:
    - service: script.clear_notification
      data:
        recipient: "{{ trigger.to_state.attributes.recipient }}"
        channel: "Phone"
        tag: "Battery"

- alias: Update available, send notification
  trigger:
    - platform: state
      entity_id: binary_sensor.updater
      from: "off"
      to: "on"
  action:
    - service: script.send_notification
      data:
        recipient: "pedro"
        message: "Home Assistant update available!"
        channel: "System"
        tag: "homeassistantupdate"

- alias: AdguardHome enabled after 2 minutes
  trigger:
    - platform: state
      entity_id: switch.adguard_protection
      to: "off"
      for:
        minutes: 2
  action:
    - service: switch.turn_on
      entity_id: switch.adguard_protection

- alias: Set Zigbee2mqtt log level
  trigger:
    - platform: state
      entity_id: input_select.zigbee2mqtt_log_level
  action:
    - service: mqtt.publish
      data:
        payload_template: "{{ trigger.to_state.state }}"
        topic: "zigbee2mqtt/bridge/config/log_level"

- alias: Log Zigbee2mqtt errors
  trigger:
    - platform: mqtt
      topic: "zigbee2mqtt/bridge/log"
  condition:
    - "{{ 'error' in trigger.payload_json.type }}"
  action:
    - service: system_log.write
      data_template:
        message: "{{ trigger.payload_json }}"
        level: warning
